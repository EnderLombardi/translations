<core:View xmlns:core="sap.ui.core" xmlns:mvc="sap.ui.core.mvc"
	xmlns="sap.m" xmlns:f="sap.ui.layout.form" xmlns:l="sap.ui.layout"
	xmlns:cData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	controllerName="airbus.mes.disruptionslist.ViewDisruption" xmlns:html="http://www.w3.org/1999/xhtml">
	<Page enableScrolling="false" showHeader="false">
		<content>

		<!-- <Text id="disruptLabel" class="sapUiSmallMargin" text="{i18nModel>Disruptions}" /> -->

			<List id="disrptlist" noDataText="{i18nModel>noDisruptions}"
				class="disruptionDetail sapUiSmallMarginBottom" items="{operationDisruptionsModel>/}">

				<CustomListItem>

					<Panel class="disruptionExpandablePanel" expandable="true" expanded="{=${operationDisruptionsModel>expanded} === 'true'}" 
						busy="{=${operationDisruptionsModel>itemBusy} === 'true'}" busyIndicatorDelay="0">
						<headerToolbar>
							<Toolbar class="disrptListToolbar" >
								<core:Icon src="sap-icon://alert" color="{path: 'operationDisruptionsModel>severity', formatter: 'airbus.mes.disruptions.Formatter.setDisruptionTitle'}" class="sapUiSmallMarginEnd" width="3%"/>
								<Label text="DIS-{operationDisruptionsModel>disruptionNumber} - {path: 'operationDisruptionsModel>category'} {operationDisruptionsModel>reason}" design="Bold" width="30%" />
								
								<!-- <ToolbarSpacer /> -->

								<Label class="disrptlistdesc pendingStatusColor" id="headerStatusPending" text="{path: 'operationDisruptionsModel>status'}" visible="{=${operationDisruptionsModel>status} === 'Pending' ? true: false}" design="Bold" width="7%"/>
								<Label class="disrptlistdesc" id="headerStatus" text="{path: 'operationDisruptionsModel>status'}" visible="{=${operationDisruptionsModel>status} === 'Pending' ? false: true}" design="Bold" width="7%"/>

								
								<Label text="{i18nModel>opensince}: " visible="{=${operationDisruptionsModel>status} === 'Closed' ? false: true}"  width="5%"/>
								<Label text=" {path:'operationDisruptionsModel>openSince', formatter: 'airbus.mes.disruptionslist.Formatter.setOpenSince'}" visible="{=${operationDisruptionsModel>status} === 'Closed' ? false: true}" design="Bold" width="5%"/>
								
								<Label text="{i18nModel>level} {operationDisruptionsModel>escalationLevel}" visible="{=${operationDisruptionsModel>status} === 'Closed' ? false: true}" class="disrptlistdesc" design="Bold" width="5%"/>
								
								<Label text="{operationDisruptionsModel>responsibleGroupDesc}" visible="{=${operationDisruptionsModel>status} === 'Closed' ? false: true}" design="Bold" width="10%"/>
								
								<Label text="{i18nModel>solutionin}:" visible="{=${operationDisruptionsModel>status} === 'Closed' ? false : ${operationDisruptionsModel>status} ==='Solved' ? false : true}" width="5%" />
								<Label text="{parts: [{path:'operationDisruptionsModel>promisedDateTime'}, {path:'operationDisruptionsModel>status'}], formatter: 'airbus.mes.disruptionslist.Formatter.setSolutionIn'}"  width="5%" design="Bold" />
								
								<ToolbarSpacer />
								<core:Icon id="disrptListEnvelop" src="sap-icon://email" class="blinkingIcon" visible="{= ${operationDisruptionsModel>isCommentsLastUpdated} === 'true' ? true: false}"  width="3%" />
								
								<Label
									text="{i18nModel>closureDate} : {operationDisruptionsModel>closureDate}"
									visible="{path: 'operationDisruptionsModel>status', formatter: 'airbus.mes.disruptionslist.Formatter.setClosureDateVisibility'}"
									class="disrptlistdesc"/>
								
								
								<Button text="{i18nModel>delete}" type="Reject"
									visible="{parts: [ {path: 'operationDisruptionsModel>originatorFlag'}, {path: 'operationDisruptionsModel>status'}, {path: 'operationDisruptionsModel>expanded'}], formatter: 'airbus.mes.disruptions.Formatter.setDeleteButtonVisibility'}"
									design="Transparent" icon="sap-icon://delete" press="onDeleteDisruption" class="disruptionTitleBarButtons"/>
								<Button text="{i18nModel>editButton}" type="Emphasized"
									visible="{parts: [ {path: 'operationDisruptionsModel>originatorFlag'}, {path: 'operationDisruptionsModel>responsibleFlag'}, {path: 'operationDisruptionsModel>status'} ,{path: 'operationDisruptionsModel>expanded'}], formatter: 'airbus.mes.disruptions.Formatter.setEditButtonVisibility'}"
									press="onEditDisruption" design="Transparent" icon="sap-icon://edit" class="disruptionTitleBarButtons"/>
								
								<Button press="handleDisruptionPanelExpand"   design="Transparent" icon="sap-icon://slim-arrow-down" 
									visible="{=${operationDisruptionsModel>expanded} !== 'true'}" />
								<Button press="handleDisruptionPanelCollapse" design="Transparent" icon="sap-icon://slim-arrow-up"
									visible="{=${operationDisruptionsModel>expanded} !== 'true' ? false : ${operationDisruptionsModel>disruptionTracker} === 'true' ? false : true}" />

							</Toolbar>
						</headerToolbar>


						<f:SimpleForm id="SimpleFormDisplay" class="disruptionDetailForm"
							maxContainerCols="3" editable="false" layout="ResponsiveGridLayout" columnsL="3" columnsM="3" columnsS="3">
							<f:content>
								<core:Title text="" />								    
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>CategoryClass}" design="Bold"/>
									<Text text="{=${operationDisruptionsModel>categoryClass} === '' ? '-' : ${operationDisruptionsModel>categoryClass}}">
									</Text>											
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>Category}" design="Bold"/>
									<Text text="{path: 'operationDisruptionsModel>category'}">
									</Text>
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>reason}" design="Bold"/>
									<Text text="{operationDisruptionsModel>reason}">
									</Text>
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>bomItem}" design="Bold"/>
									<Text id="bomItem" text="{operationDisruptionsModel>bomItem}" />
											
												
								<core:Title text="" />				
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>gravity}" design="Bold"/>
									<Text id="gravityText"
										text="{path: 'operationDisruptionsModel>severity', formatter: 'airbus.mes.disruptions.Formatter.setGravityText'}">
									</Text>
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>resGroup}" design="Bold" />
									<Text text="{operationDisruptionsModel>responsibleGroupDesc}" />
									
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>escalation}" design="Bold"/>
									<Text id="escalationText" text="{i18nModel>level} {operationDisruptionsModel>escalationLevel}" />
									
									<Label class="detailLabels sapUiMediumMarginBottom" text="{path: 'i18nModel>TimeLost', formatter: 'airbus.mes.disruptionslist.Formatter.getTimeLostText'}" design="Bold"/>
									<Text text="{path: 'operationDisruptionsModel>timeLost', formatter: 'airbus.mes.disruptions.Formatter.setTimeLostValue'}" />
							
								<core:Title text="" />					
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>OpenDate}" design="Bold"/>
									<Text text="{operationDisruptionsModel>openDateTime}">
									</Text>
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>Expected}" design="Bold"/>		
									<Text text="{operationDisruptionsModel>requiredFixBy}">	
									</Text>
									<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>promisedDateTime}" design="Bold"/>
									<Text text="{=${operationDisruptionsModel>promisedDateTime} === '' ? '-' : ${operationDisruptionsModel>promisedDateTime}}">
									</Text>
									
									<!-- <Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>OriginatorGroup}" design="Bold"/>										
									<Text text="{operationDisruptionsModel>originatorGroupDesc}" /> -->
								
									<!-- 	<f:FormElement visible="{path: 'operationDisruptionsModel>ClosureDate', formatter: 'airbus.mes.disruptions.Formatter.setOpeningTimeVisibility'}">
											<f:label>
												<Label class="detailLabels" text="{i18nModel>openingTime}">
													<layoutData>
														<l:GridData span="L3 M3 S12" />
													</layoutData>
												</Label>
											</f:label>
											<f:fields>
												<Text text="{parts: [ {path: 'operationDisruptionsModel>OpeningTime'}, {path: 'operationDisruptionsModel>ClosureDate'}], formatter: 'airbus.mes.disruptions.Formatter.formatOpeningTime'}">
													<layoutData>
														<l:GridData span="L3 M3 S12" />
													</layoutData>
												</Text>
											</f:fields>
										</f:FormElement> -->
							</f:content>
					</f:SimpleForm>
					
					<f:SimpleForm id="extraFieldDisruption" class="disruptionDetailForm" visible="{=${operationDisruptionsModel>internalPanelExpanded} === 'true'}"
							maxContainerCols="3" editable="false" layout="ResponsiveGridLayout" columnsL="3" columnsM="3" columnsS="3">
						<f:content>
							<core:Title text="" />
							<Label text="{i18nModel>area}" class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{operationDisruptionsModel>area}" />
							<Label text="{i18nModel>plan}"  class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{operationDisruptionsModel>plan}" />
							<Label text="{i18nModel>material}" class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{path: 'operationDisruptionsModel>materials', formatter: 'airbus.mes.disruptions.Formatter.setMaterialqty'}" />

							<core:Title text="" />
							<Label text="{i18nModel>ribs}" class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{operationDisruptionsModel>ribs}" />
							<Label text="{i18nModel>view}" class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{operationDisruptionsModel>view}" />
							<Label class="detailLabels sapUiMediumMarginBottom" text="{i18nModel>Jigtool}"  design="Bold"/>
							<Text text="{path: 'operationDisruptionsModel>jigTools', formatter: 'airbus.mes.disruptions.Formatter.setMaterialqty'}" />

							<core:Title text="" />
							<Label text="{i18nModel>stringer}" class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{operationDisruptionsModel>stringer}"  />
							<Label text="{i18nModel>stringer_rail}" class="detailLabels sapUiMediumMarginBottom" design="Bold"/>
							<Text text="{operationDisruptionsModel>stringer_rail}" />
						</f:content>	
					</f:SimpleForm>
					<HBox alignItems="Center" justifyContent="Center" width="100%" class="HorizontalLine">
						<Button press="onInternalPanelexpand"   type="Transparent" icon="sap-icon://slim-arrow-down" 
									visible="{=${operationDisruptionsModel>internalPanelExpanded} !== 'true'}" class="RoundBttn" />
						<Button press="onInternalPanelCollapse" type="Transparent" icon="sap-icon://slim-arrow-up" 
									visible="{=${operationDisruptionsModel>internalPanelExpanded} === 'true'}" class="RoundBttn"/>
					</HBox>

						<!-- <Text text="{i18nModel>status} : {path: 'operationDisruptionsModel>Status', formatter: 'airbus.mes.disruptions.Formatter.setDisruptionStatus'}"
							class="sapUiMediumMarginBegin statusText" /> -->

						<VBox
							visible="{path: 'operationDisruptionsModel>solution', formatter: 'airbus.mes.disruptions.Formatter.setSolutionVisibility'}"
							class="msgColor sapUiSmallMarginBeginEnd sapUiTinyMarginTop">
							<Text
								class="sapUiSmallMarginBeginEnd sapUiTinyMarginTopBottom msgHeaderText"
								text="{i18nModel>solution}:"></Text>
							<Text text="{path: 'operationDisruptionsModel>solution', formatter: 'airbus.mes.disruptions.Formatter.formatComment'}"
								class="sapUiSmallMarginBeginEnd sapUiSmallMarginBottom"></Text>
						</VBox>
						
						<Button text="{i18nModel>seeMoreMessages} ({operationDisruptionsModel>totalComments})" icon="sap-icon://email" press="seeMoreMesssages" visible="{parts: [ {path: 'operationDisruptionsModel>totalComments'}, {path:'operationDisruptionsModel>prevCommentsLoaded'} ], formatter: 'airbus.mes.disruptions.Formatter.setVisibilityShowCommentsButton'}"
							design="Transparent" class="transparentBlueButton sapUiSmallMarginTop"  />	
						<Button text="{i18nModel>seeLessMessages}" icon="sap-icon://email" press="seeLessMesssages" visible="{=${operationDisruptionsModel>prevCommentsLoaded} === 'true'}"
							design="Transparent" class="transparentBlueButton sapUiSmallMarginTop"  />
							
							
						<!--  For list of comments -->
						<VBox class="sapUiSmallMarginBeginEnd msgColor" visible="{=${operationDisruptionsModel>prevCommentsLoaded} !== 'true'}">
							 <HBox class="sapUiSmallMarginBeginEnd sapUiTinyMarginTopBottom msgHeaderText">
								<items>
									<Text
										text="{i18nModel>from} : {path: 'operationDisruptionsModel>disruptionComments/0/userFullName', formatter: 'airbus.mes.disruptions.Formatter.textCaseFormat'}"></Text>
									<Text text="|" class="sapUiSmallMarginBeginEnd"></Text>
									<Text 
										text="{i18nModel>action} : {parts: [ {path: 'operationDisruptionsModel>disruptionComments/0/action'}, {path: 'operationDisruptionsModel>disruptionComments/0/comments'}], formatter: 'airbus.mes.disruptions.Formatter.formatCommentAction'}"></Text>
										<Text text="|" class="sapUiSmallMarginBeginEnd"></Text>
									<Text
										text="{i18nModel>date/time} : {path: 'operationDisruptionsModel>disruptionComments/0/date'}"></Text>
								</items>
							</HBox>
							
							<Text text="{path: 'operationDisruptionsModel>disruptionComments/0/comments', formatter: 'airbus.mes.disruptions.Formatter.formatComment'}"
								class="sapUiSmallMarginBeginEnd sapUiTinyMarginBottom"></Text>
						</VBox>
 
						<List showNoData="false" class="sapUiSmallMarginBeginEnd" visible="{=${operationDisruptionsModel>prevCommentsLoaded} === 'true'}"
								items="{path: 'operationDisruptionsModel>disruptionComments'}">
						
						<!-- 	items="{path: 'operationDisruptionsModel>disruptionComments', 
								    filters: [ { parts: [ {path: 'operationDisruptionsModel>prevCommentsLoaded'}, {path: 'operationDisruptionsModel>totalComments'}, {path: 'counter'} ], formatter: 'airbus.mes.disruptions.Formatter.setFilterForComments'} ]}"> -->
								    
							<CustomListItem class="msgColor">
								<HBox
									class="sapUiSmallMarginBeginEnd sapUiTinyMarginTopBottom msgHeaderText">
									<items>
										<Text
											text="{i18nModel>from} : {path: 'operationDisruptionsModel>userFullName', formatter: 'airbus.mes.disruptions.Formatter.textCaseFormat'}"></Text>
										<Text text="|" class="sapUiSmallMarginBeginEnd"></Text>
										<Text id="commentActionText"
											text="{i18nModel>action} : {parts: [ {path: 'operationDisruptionsModel>action'}, {path: 'operationDisruptionsModel>comments'}], formatter: 'airbus.mes.disruptions.Formatter.formatCommentAction'}"></Text>
											<Text text="|" class="sapUiSmallMarginBeginEnd"></Text>
										<Text
											text="{i18nModel>date/time} : {path: 'operationDisruptionsModel>date'}"></Text>
									</items>
								</HBox>

								<Text text="{path: 'operationDisruptionsModel>comments', formatter: 'airbus.mes.disruptions.Formatter.formatComment'}"
									class="sapUiSmallMarginBeginEnd sapUiTinyMarginBottom"></Text>
							</CustomListItem>
						</List>

						<Panel id="commentBox" class="sapUiSmallMarginBegin" visible="{=${operationDisruptionsModel>commentBoxOpened} === 'true'}">
							<VBox width="100%">
								<TextArea id="commentArea" placeholder="{i18nModel>addComment}" width="90%"
									visible="{=${operationDisruptionsModel>commentBoxOpened} === 'true'}" value="{operationDisruptionsModel>disruptionNewComment}" />
									
								<HBox>
									<Button text="{i18nModel>submitComment}" type="Accept" width="12rem"
										press="submitComment" class="sapUiSmallMarginEnd buttonAccept"
										visible="{=${operationDisruptionsModel>commentBoxOpened} === 'true'}" />									 

									<Button text="{i18nModel>cancel}" type="Reject" width="12rem"
										press="hideCommentBox" class="sapUiSmallMarginEnd buttonReject"
										visible="{=${operationDisruptionsModel>commentBoxOpened} === 'true'}" />
								</HBox>
							</VBox>
						</Panel>
						<Button text="{i18nModel>seeAttachment}" icon="sap-icon://attachment"
								press="viewAttachments" design="Transparent" class="transparentBlueButton"  />

						<List id="idListDocument" class="sapUiSmallMarginBegin"
							items="{path: 'operationDisruptionsModel>attachedDocument'}" visible="{=${operationDisruptionsModel>showAttachedDocument} === true}">
							<CustomListItem id="document-list-item" >
								<HBox class="document-item">
									<Link class="document-title" text="{operationDisruptionsModel>fileName}" href="{operationDisruptionsModel>fileURL}"/>
									<!--<Label id="document-title" class="document-title" text="{operationDisruptionsModel>fileName}" />-->
									<Label id="document-description" class="document-description" text="{operationDisruptionsModel>fileDescription}" />
									<Label id="document-size" class="document-description" text="{operationDisruptionsModel>fileSize} Ko" />
								</HBox>
							</CustomListItem>
						</List>
							
						<Toolbar class="disruptionBottomBar">
						
							<ToolbarSpacer />
							<Button id="addComment" text="{i18nModel>addComment}"
								type="Emphasized"
								visible="{parts: [ {path: 'operationDisruptionsModel>originatorFlag'}, {path: 'operationDisruptionsModel>responsibleFlag'}, {path: 'operationDisruptionsModel>resolverID'}, {path: 'operationDisruptionsModel>status'}, {path: 'operationDisruptionsModel>commentBoxOpened'} ], formatter: 'airbus.mes.disruptions.Formatter.setAddCommentButtonVisibility'}"
								press="showCommentBox" design="Transparent"/>

							<Button text="{i18nModel>acknowledge}" type="Accept"
								visible="{parts: [ {path: 'operationDisruptionsModel>responsibleFlag'}, {path: 'operationDisruptionsModel>status'} ], formatter: 'airbus.mes.disruptions.Formatter.setAcknowledgeButtonVisibility'}"
								press="onAckDisruption" design="Transparent" />

							<Button id="rejectDisruption" text="{i18nModel>reject}"
								type="Reject"
								visible="{parts: [ {path: 'operationDisruptionsModel>responsibleFlag'}, {path: 'operationDisruptionsModel>status'} ], formatter: 'airbus.mes.disruptions.Formatter.setRejectButtonVisibility'}"
								press="onRejectDisruption" design="Transparent"/>
	
							<Button id="escalateBtn" text="{i18nModel>escalate}" type="Reject" enabled= "{Profile>/identifiedUser/permissions/WORK_DIS_ESCALATE}"
								visible="{parts: [ {path: 'operationDisruptionsModel>originatorFlag'}, {path: 'operationDisruptionsModel>escalationLevel'}, {path: 'operationDisruptionsModel>status'} ], formatter: 'airbus.mes.disruptions.Formatter.setEscalateButtonVisibility'}"
								press="onEscalateDisruptionComment" design="Transparent"/>

							<Button text="{i18nModel>markSolved}" type="Accept"
								visible="{parts: [ {path: 'operationDisruptionsModel>responsibleFlag'}, {path: 'operationDisruptionsModel>status'} ], formatter: 'airbus.mes.disruptions.Formatter.setMarkSolvedButtonVisibility'}"
								press="onMarkSolvedDisruption" design="Transparent"/>
								
  						  	<Button text="{i18nModel>refuse}" type="Reject"
								visible="{parts: [ {path: 'operationDisruptionsModel>originatorFlag'}, {path: 'operationDisruptionsModel>status'} ], formatter: 'airbus.mes.disruptions.Formatter.setRefuseButtonVisibility'}"
								press="onRefuseDisruption" design="Transparent"/>
								
							<Button text="{i18nModel>close}" type="Accept"  design="Transparent"
								visible="{parts: [ {path: 'operationDisruptionsModel>originatorFlag'}, {path: 'operationDisruptionsModel>status'}, {path: 'operationDisruptionsModel>expanded'} ], formatter: 'airbus.mes.disruptions.Formatter.setCloseButtonVisibility'}"
								icon="sap-icon://accept" press="onCloseDisruption"  enabled="{Profile>/identifiedUser/permissions/WORK_DIS_CLOSE}"/>
								

						</Toolbar>

					</Panel>
					
				</CustomListItem>

			</List>
		</content>

	</Page>
</core:View>

