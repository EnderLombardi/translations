/**
 * settings.js
 * ======================
 * The model of the WebViewer Universal Viewer can be specified here.
 * The model contains all the data necessary to load the document and setup UI state of the viewer.
 * This could contain the URL to the xod document, URL to the annotation server, the default layout modes etc.
 * 
 * This file can be defined statically on the client side, or be dynmically generated by a web server.
 * 
 * 
 */


//=========================================================================
//Sample implementation: setting the default "model" data
//=========================================================================
//Optional: Provide a server url here to fetch default settings, used for model.fetch();
//window.WebViewerUniversalInstance.model.url = "http://your.server/model";
window.WebViewerUniversalInstance.model.set(
        {
            documentUrl: "../GettingStarted.xod",      //url to the xod document to load on start      
            //serverUrl: "../html5/annotationHandler.php",    //server script for handling annotations
            annotationUser: new PDFTron.WebViewer.User("Guest", false),
            currentPageNumber: 0,
            pageCount: 0,
            zoomLevel: 0,
            fitMode: PDFTron.WebViewer.FitMode.Zoom,
            layoutMode: PDFTron.WebViewer.LayoutMode.SinglePage,
            toolMode: '',
            rotation: 0,
            webViewerLibPath: '..', //URL path to the WebViewer lib folder
            webViewerOptions: { //extra WebViewer options
                mobileRedirect: false,
                documentId: "GettingStarted",
                silverlightOptions: {
                    enableAnnotations: false //disable annotations if silverlight is loaded. 
                }
            }
        }
);


//=========================================================================
//Sample implementation: basic method for creating the "view"
//=========================================================================
//$(function() {
//    //create the View when DOM is ready
//    window.WebViewerUniversalInstance.createView();    
//});


//=========================================================================
//Sample implementation: using a router (Backbone.router) to handle hash 
//parameters as input to the viewer, then creating the "view"
//=========================================================================
$(function() {
    var viewerState = window.WebViewerUniversalInstance.model;
    var AppRouter = Backbone.Router.extend({
        routes: {
            "page/:page": "startOnPage",
            "t/:type": "defaultType",
            "d/:url": "documentUrl",
            "*actions": "defaultRoute"
        },
        defaultType: function(type) {
            var t = type;
            switch (type) {
                case 's':
                    t = 'silverlight';
                    break;
                case 'h':
                    t = 'html5';
                    break;
                case 'm':
                    t = 'html5Mobile';
                    break;
                case 'f':
                    t = 'flash';
                    break;
                default:
                    t = type;
                    break;

            }
            viewerState.set('type', t);
            createView();
        },
        startOnPage: function(page) {
            createView();
        },
        documentUrl: function(url) {
            viewerState.set('documentUrl', url);
            createView();
        },
        defaultRoute: function() {
            viewerState.unset('type');
            createView();
        }
    });
    var createView = function() {
        if (window.WebViewerUniversalInstance.view) {
            //view already exists, reload
            window.location.reload();
        }

        if (typeof viewerState.url === 'string' && viewerState.url) {
            //a server url was provided, ask server for viewer defaults
            viewerState.fetch({
                success: function(serverProvidedModel, response, options) {
                    window.WebViewerUniversalInstance.view = new window.WebViewerUniversalView({
                        model: serverProvidedModel
                    });
                },
                error: function(model, response, options) {
                    console.error("An error occurred when requesting viewer data from the server.");
                    //handle server errors and permission errors
                    window.WebViewerUniversalInstance.view = new window.WebViewerUniversalView({
                        model: viewerState
                    });
                }
            });
        } else {
            window.WebViewerUniversalInstance.view = new window.WebViewerUniversalView({
                model: viewerState
            });
        }
    };
    // Initiate the router
    window.WebViewerUniversalInstance.appRouter = new AppRouter();
    Backbone.history.start();
});